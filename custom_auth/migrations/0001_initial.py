# Generated by Django 2.2.5 on 2019-09-11 16:34

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(
                    default=False,
                    help_text='Designates that this user has all permissions without explicitly assigning them.',
                    verbose_name='superuser status')),
                ('username', models.CharField(
                    help_text='Required. 30 characters or fewer. Letters, numbers and @/./+/-/_ characters',
                    max_length=30,
                    unique=True,
                    validators=[
                        django.core.validators.RegexValidator(
                            re.compile('^[\\w.@+-]+$'),
                            'Enter a valid username.',
                            'invalid')],
                    verbose_name='Username')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('is_staff', models.BooleanField(
                    default=False,
                    help_text='Designates whether the user can log into this admin site.',
                    verbose_name='Staff status')),
                ('is_active', models.BooleanField(
                    default=False,
                    help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                    verbose_name='Active')),
                ('is_nira_admin', models.BooleanField(
                    default=False,
                    help_text='Designates whether this user has special permissions, e.g. add content on behalf of another user.',
                    verbose_name='NIRA admin')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date joined')),
                ('groups', models.ManyToManyField(
                    blank=True,
                    help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                    related_name='user_set',
                    related_query_name='user',
                    to='auth.Group',
                    verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(
                    blank=True,
                    help_text='Specific permissions for this user.',
                    related_name='user_set',
                    related_query_name='user',
                    to='auth.Permission',
                    verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'permissions': (
                    ('view_reports', 'Can see reports'),
                    ('add_content', 'Can add contents'),
                    ('create_documents', 'Can create documents')),
            },
        ),
    ]
